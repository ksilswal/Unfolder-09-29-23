main.py:
-------

class origami:
    
    def __init__(self, origamiCoor,AdjacencyMatrix,Creases,layers):
            self.origamiCoor =  origamiCoor
            self.AdjacencyMatrix = AdjacencyMatrix
            self.Creases = Creases
            self.layers = layers

Origami=origami([[0,0], [1,0], [0,1], [1,1]],[[0,-1,1,0],[-1,0,0,-1],[1,0,0,1],[0,-1,1,0]], [[0,2,2,0], [0,0,0,4],[2,0,0,1],[0,4,1,0]],[[0,4,2,0],[4,0,0,4],[2,0,0,1],[0,4,1,0]])

def nodeWeight():
    #initialize variables
    first = 0
    second = 0
    i=0 #cell of origamiCoor, AdjacencyMatrix, and crease
    
    while i<= len(Origami.origamiCoor)-1:
     j=0
     #tracks the sum of all the integers in the cell i of the AdjacencyMatrix
     testCell=0 
     #the sum of all the integers in the cell with the largest sum of the AdjacencyMatrix
     bigCell=0 
     #the sum of all the integers in the cell with the 2nd largest sum of the AdjacencyMatrix
     smallCell=0 
    
     while j<= len(Origami.AdjacencyMatrix[i])-1:
           #checks the weightage of each point
           testCell += Origami.AdjacencyMatrix[i][j]
           bigCell+= Origami.AdjacencyMatrix[first][j]
           smallCell+= Origami.AdjacencyMatrix[second][j]
           j+=1
        
    #replaces the holding largest value and 2nd largest
     if testCell > bigCell:
         second = first
         first = i
     #replaces the second largest value
     if testCell >= smallCell and bigCell >= testCell and Origami.AdjacencyMatrix[i][first] == 1 and Origami.Creases[i][first]==1 :
         second = i
     
    
     
     i+=1
     
     
    #checks the folding 
    
    print(Origami.layers)
    print(first)
    print(second)
    
    
    
    
    
    try:
        #finds slope of crease in plane
        m=(Origami.origamiCoor[first][1]-Origami.origamiCoor[second][1])/(Origami.origamiCoor[first][0]-Origami.origamiCoor[second][0])
        print(m)
        
        # holding x-coordinate
        x=0
        # iteration variable
        l=0
        
        if Origami.AdjacencyMatrix[first][second]%2 ==0:
            Origami.AdjacencyMatrix[first][second]=Origami.AdjacencyMatrix[first][second]/2
            Origami.AdjacencyMatrix[second][first]=Origami.AdjacencyMatrix[second][first]/2
        else:
            Origami.AdjacencyMatrix[first][second]=Origami.AdjacencyMatrix[first][second]-1
            Origami.AdjacencyMatrix[second][first]=Origami.AdjacencyMatrix[second][first]-1
        #condition if m is 0
        if m==0:
            a= len(Origami.origamiCoor)-1

            while l<= a:
                #finds distance from point and crease
                distance = Origami.origamiCoor[first][1]-Origami.origamiCoor[l][1]
                if l!= first and l!= second:
                    
                    #finds reflected y-value
                    newY=2*distance+Origami.origamiCoor[l][1]
                    g=0
                    while g<= a:
                        if g!= first and g!=second:
                            Origami.Creases[l][g]=Origami.Creases[l][g]/2
                        g+=1    
                    Origami.origamiCoor.append([Origami.origamiCoor[l][0],newY])
                    Origami.Creases.append(Origami.Creases[l])
                    #adjacency
                else:
                     Origami.Creases[first][second]=Origami.Creases[first][second]-1
                     Origami.Creases[second][first]=Origami.Creases[second][first]-1
                    
                l+=1
        else:
            #stores the value of the x coordinate of the largest degree point
            xCoor=Origami.origamiCoor[first][0]
            
            while l<= len(Origami.origamiCoor)-1:
                
                
                if l!= first and l!= second:
                    x=(m*xCoor-Origami.origamiCoor[l][0]/m-Origami.origamiCoor[first][1]+Origami.origamiCoor[l][1])/(m-1/m)
                    y=m*x-m*Origami.origamiCoor[first][0]+Origami.origamiCoor[first][1]
                    
                    xDiff=Origami.origamiCoor[l][0]-x
                    yDiff=Origami.origamiCoor[l][1]-y
                    
                    newPointX = Origami.origamiCoor[l][0] -2*x
                    newPointY = Origami.origamiCoor[l][1] -2*y
                    
                    Origami.origamiCoor.append([newPointX,newPointY])
                l+=1
                
        print(Origami.Creases)
                
            
        
        print(Origami.origamiCoor)
    except ZeroDivisionError:
        l=0
        b="undef"
        print(b)
        a= len(Origami.origamiCoor)-1
        while l<= a:
            distance = Origami.origamiCoor[first][1]-Origami.origamiCoor[l][1]
            if l!= first or l!= second:
                newY=2*distance+Origami.origamiCoor[l][1]
                Origami.origamiCoor.append([Origami.origamiCoor[l][0],newY])
                    
            l+=1
    
nodeWeight()

origami.py:
----------
class origami:
    
    def __init__(origamiCoor,AdjacencyMatrix,Creases,layers):
            self.origamiCoor =  [[0,0], [1,0], [0,1], [1,1]]
            self.Adjacency = [[0,-1,1,0],[-1,0,0,-1],[1,0,0,1],[0,-1,1,0]]
            self.Creases = [[0,2,2,0], [0,0,0,4], [2,0,0,1], [0,4,1,0]]
            self.layers = [[0,4,2,0], [4,0,0,4], [2,0,0,1], [0,4,1,0]]

